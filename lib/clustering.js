// Generated by CoffeeScript 1.7.1
(function() {
  var calcCenter, calcClusters, calcDistance, color, seeds;

  color = require("color-convert");

  calcDistance = require("./CIE76.js");

  seeds = require("./seeds.js");

  calcCenter = function(labs) {
    var A, B, L, d, lab, len, minDistance, newCenter, _i, _len, _ref;
    _ref = [0, 0, 0], L = _ref[0], A = _ref[1], B = _ref[2];
    labs.forEach(function(lab) {
      L += lab[0];
      A += lab[1];
      return B += lab[2];
    });
    len = labs.length;
    L /= len;
    A /= len;
    B /= len;
    minDistance = null;
    newCenter = null;
    for (_i = 0, _len = labs.length; _i < _len; _i++) {
      lab = labs[_i];
      d = calcDistance([L, A, B], lab);
      if ((newCenter == null) || (d > minDistance)) {
        minDistance = d;
        newCenter = lab;
      }
    }
    return newCenter;
  };

  calcClusters = function(pixels, config) {
    var centers, clusters, end, iter, log, removeEmptyClusters, start, useRandomPixels;
    start = (new Date()).getTime();
    log = function(title, colors) {
      if (colors == null) {
        colors = [];
      }
      if (config.debug) {
        return typeof config.log === "function" ? config.log(title, colors.map(function(lab) {
          return color.lab2rgb(lab);
        })) : void 0;
      }
    };
    pixels = pixels.map(function(rgba) {
      var a, b, g, r, rgb;
      r = rgba[0], g = rgba[1], b = rgba[2], a = rgba[3];
      rgb = [r, g, b];
      if (a !== 255) {
        a /= 255;
        rgb = rgb.map(function(elem) {
          return 255 * (1 - a) + elem * a;
        });
      }
      return color.rgb2lab(rgb);
    });
    centers = seeds.map(function(rgb) {
      return color.rgb2lab(rgb);
    });
    log("Seeds", centers);
    clusters = null;
    iter = function(removeEmptyClusters, useRandomPixels) {
      var i, minDistance, minIndex, pixel, _i, _j, _len, _ref;
      if (removeEmptyClusters == null) {
        removeEmptyClusters = true;
      }
      if (useRandomPixels == null) {
        useRandomPixels = true;
      }
      clusters = [];
      for (i = _i = 0, _ref = centers.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        clusters[i] = [];
      }
      for (_j = 0, _len = pixels.length; _j < _len; _j++) {
        pixel = pixels[_j];
        minIndex = null;
        minDistance = null;
        centers.forEach(function(center, index) {
          var d;
          d = calcDistance(center, pixel);
          if ((minDistance == null) || (d < minDistance)) {
            minIndex = index;
            return minDistance = d;
          }
        });
        clusters[minIndex].push(pixel);
      }
      if (removeEmptyClusters) {
        clusters = clusters.filter(function(clusterPixels) {
          return clusterPixels.length > 0;
        });
      }
      centers = clusters.map(function(clusterPixels) {
        return calcCenter(clusterPixels);
      });
      if (useRandomPixels) {
        while (centers.length < config.minCount) {
          centers.push(pixels[parseInt(Math.random() * pixels.length)]);
        }
      }
      return log("New Clusters", centers);
    };
    iter();
    iter();
    iter();
    iter(removeEmptyClusters = false, useRandomPixels = false);
    centers = centers.map(function(lab) {
      return color.lab2rgb(lab);
    });
    end = (new Date()).getTime();
    log("Calc " + centers.length + " clusters in " + (end - start) + "ms");
    return centers.map(function(center, i) {
      return {
        color: center,
        weight: clusters[i].length
      };
    });
  };

  module.exports = calcClusters;

}).call(this);
