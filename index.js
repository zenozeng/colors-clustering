// Generated by CoffeeScript 1.7.1
(function() {
  var Canvas, Image, calcClusters, clustering;

  calcClusters = require("./lib/clustering.js");

  Canvas = require("canvas-browserify");

  Image = Canvas.Image;

  clustering = function(config, callback) {
    var defaultConfig, img, k, timeImgStart, v;
    defaultConfig = {
      debug: false,
      maxWidth: 30,
      maxHeight: 30,
      minCount: 1
    };
    for (k in config) {
      v = config[k];
      defaultConfig[k] = v;
    }
    config = defaultConfig;
    img = new Image;
    timeImgStart = (new Date()).getTime();
    img.onload = function() {
      var canvas, ctx, height, i, image, imgData, pixels, scale, timeStart, width, _ref;
      if (config.debug) {
        console.log("load image in " + ((new Date()).getTime() - timeImgStart) + "ms");
      }
      timeStart = (new Date()).getTime();
      image = this;
      scale = Math.max(image.width / config.maxWidth, image.height / config.maxHeight, 1);
      _ref = [image.width, image.height].map(function(elem) {
        return parseInt(elem / scale);
      }), width = _ref[0], height = _ref[1];
      canvas = new Canvas(width, height);
      ctx = canvas.getContext("2d");
      ctx.drawImage(this, 0, 0, image.width, image.height, 0, 0, width, height);
      imgData = ctx.getImageData(0, 0, width, height);
      pixels = [];
      i = 0;
      while (i < imgData.data.length) {
        pixels.push([imgData.data[i], imgData.data[i + 1], imgData.data[i + 2], imgData.data[i + 3]]);
        i += 4;
      }
      if (config.debug) {
        console.log("parse image in " + ((new Date()).getTime() - timeStart) + "ms");
      }
      return typeof callback === "function" ? callback(calcClusters(pixels, config)) : void 0;
    };
    return img.src = config.src;
  };

  global.colorsClustering = clustering;

}).call(this);
